{
    "swagger": "2.0",
    "info": {
        "title": "Checkout API",
        "description": "Provides functionality for the purchase, payment and follow up of fulfilment of topups, invoices or Telefonica products via the Global Checkout component. \n\n# Relevant Definitions and concepts\n\n- **Purchase**: The action of paying for a good, service or product.\n- **Payment**: The act or process of paying.\n- **Fulfillment**: The dispatch of a customerâ€™s order.\n- **Registration**: The process to register a new payment method without a payment.\n- **Payable**: The concept, service, good or product a client is paying for. For example, invoices, topups, devices, etc...\n- **DCP**: Acronym of Digital Collection Platform. Telefonica Global Platform that provides payment capabilities using credit cards and APM (Alternative Payment Methods, such as PayPal or MercadoPago).\n- **Tokenized card**: Refers to the token and metadata created by a payment gateway (e.g. DCP) from the sensitive data of a banking card. It can be used for payments without having to introduce each time all its data.\n\n# API functionality\n\nThis API allows to create, pay and follow up purchases to pay invoices or increase the balance but allowing to extend the functionality to cover also other resources like services, products or devices. It also allows to register new payment methods on OB systems to be used to pay further purchases.\n\n# Resources and Operations overview\n\n There are 4 resources in the API:\n- The first one, **purchase**, exposes 3 operations that allow to create and retrieve purchases for a specific user.\n- **payment** is the second one and it exposes an operation to request to Global Checkout the payment of a specific purchase indicating the payment method to be used.\n- The third resource is **configuration** that exposes one operation to retrieve some Global Checkout configuration like the locale to be used by the SDK or the maximum number of stored credit cards allowed for a user.\n- The last resource is **paymentMethod**. This resource has 2 operations to start and follow up the registration of a new payment method.\n\n# Further Info and Support\nFind answers to Frequently Asked Questions in **https://qna.baikalplatform.com/c/api-faq**.\n\n Topics with the **tag 'global-checkout'** are specific for Global Checkout API.",
        "version": "1.1.0",
        "termsOfService": "https://www.telefonica.es/es/",
        "contact": {
            "name": "4th Platform Team",
            "email": "4pf@tid.es"
        }
    },
    "x-fp-apiPrefix": "/checkout",
    "host": "https://checkout-service-cert1-es.mytelco.io",
    "basePath": "/checkout/v1",
    "tags": [
        {
            "name": "purchase",
            "description": "Operations available with regards to the Purchase"
        },
        {
            "name": "payment",
            "description": "Operations available with regards to the Payment"
        },
        {
            "name": "configuration",
            "description": "Operations available with regards to configuration"
        }
    ],
    "schemes": ["https"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "paths": {
        "/users/{user_id}/payment-methods/registration": {
            "post": {
                "tags": ["paymentMethod"],
                "summary": "Initialises a payment method registration operation.",
                "operationId": "initialisePaymentMethodRegistration",
                "description": "Stores a payment method for later use.",
                "x-fp-pi-scopes": ["checkout-payment-method-write"],
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
                    },
                    {
                        "$ref": "#/parameters/PaymentMethodRegistrationData"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The request to register a new payment method was accepted by Global Checkout but further processing by the API client will be needed. The response will contain all the data needed by the API client to finish the payment method registration.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/PolymorphicPaymentMethodRegistration"
                        },
                        "examples": {
                            "application/json": {
                                "id": "7a622a44-ab0d-4fad-a38c-28db8e584638",
                                "status": "saving",
                                "registration_form": {
                                    "form_url": "https://qa.mesgw.us.telefonica.com:6986/servlet/ServletDirectorMovil",
                                    "sale_parameters": {
                                        "IDENTIDAD": "SCNP",
                                        "IDCOMERCIO": "100000010"
                                    }
                                },
                                "type": "card",
                                "platform": "DCP"
                            }
                        }
                    },
                    "400": {
                        "description": "Problem with the client request.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INVALID_ARGUMENT",
                                "message": "Client specified an invalid argument, request body or query param"
                            }
                        }
                    },
                    "403": {
                        "description": "Client requested an operation that is denied.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
                        },
                        "examples": {
                            "application/json": {
                                "code": "PERMISSION_DENIED",
                                "message": "Authenticated user has no permission to access the requested resource"
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
                        },
                        "examples": {
                            "application/json": {
                                "code": "NOT_FOUND",
                                "message": "The specified resource is not found"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.\nThe server could not produce a new consumable Purchases resource, yet it cannot provide more thorough information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INTERNAL",
                                "message": "Server error"
                            }
                        }
                    },
                    "504": {
                        "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
                        },
                        "examples": {
                            "application/json": {
                                "code": "TIMEOUT",
                                "message": "Request timeout exceeded. Try it later"
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}/payment-methods/registration/{payment_method_registration_id}": {
            "get": {
                "tags": ["paymentMethod"],
                "summary": "Requests a payment method's registration information",
                "operationId": "getPaymentMethodRegistrationInfo",
                "description": "Retrieves the information associated with a payment method registration.",
                "x-fp-pi-scopes": ["checkout-payment-method-read"],
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "$ref": "#/parameters/PaymentMethodRegistrationId"
                    },
                    {
                        "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The payment method registration information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/PolymorphicPaymentMethodRegistration"
                        },
                        "examples": {
                            "application/json": {
                                "id": "7a622a44-ab0d-4fad-a38c-28db8e584638",
                                "status": "saved_ok",
                                "type": "card",
                                "platform": "DCP"
                            }
                        }
                    },
                    "400": {
                        "description": "Problem with the client request.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INVALID_ARGUMENT",
                                "message": "Client specified an invalid argument, request body or query param"
                            }
                        }
                    },
                    "403": {
                        "description": "Client requested an operation that is denied.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
                        },
                        "examples": {
                            "application/json": {
                                "code": "PERMISSION_DENIED",
                                "message": "Authenticated user has no permission to access the requested resource"
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
                        },
                        "examples": {
                            "application/json": {
                                "code": "NOT_FOUND",
                                "message": "The specified resource is not found"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.\nThe server could not produce a new consumable Purchases resource, yet it cannot provide more thorough information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INTERNAL",
                                "message": "Server error"
                            }
                        }
                    },
                    "504": {
                        "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
                        },
                        "examples": {
                            "application/json": {
                                "code": "TIMEOUT",
                                "message": "Request timeout exceeded. Try it later"
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}/purchases": {
            "get": {
                "tags": ["purchase"],
                "summary": "Retrieve a list of purchases",
                "operationId": "getPurchases",
                "description": "Search into user purchases.\nCurrently query params unsupported, searches only purchases created in the past 24 hours.",
                "x-fp-pi-scopes": ["checkout-purchase-user-read"],
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchases information",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Purchases"
                        },
                        "examples": {
                            "application/json": [
                                {
                                    "payable": {
                                        "type": "invoices",
                                        "invoices": [
                                            {
                                                "id": "invoiceId1",
                                                "amount": {
                                                    "value": 6.25,
                                                    "currency": "BRL"
                                                }
                                            },
                                            {
                                                "id": "invoiceId2",
                                                "amount": {
                                                    "value": 6.25,
                                                    "currency": "BRL"
                                                }
                                            }
                                        ],
                                        "total_amount": {
                                            "value": 12.5,
                                            "currency": "BRL",
                                            "tax_included": true
                                        }
                                    },
                                    "id": "54d811ef-bb43-4284-b90e-57edc9b4fa31",
                                    "status": "succeeded",
                                    "payment_info": null
                                },
                                {
                                    "payable": {
                                        "type": "top_up",
                                        "phone_number": "+346661113334",
                                        "amount": {
                                            "value": 32.5,
                                            "currency": "BRL"
                                        }
                                    },
                                    "id": "2cd85f32-5555-4511-b009-1234598878a1",
                                    "status": "ongoing",
                                    "payment_info": {
                                        "type": "dcp_payment",
                                        "card_status": "saved_ok"
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Client requested an operation that is denied.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
                        },
                        "examples": {
                            "application/json": {
                                "code": "PERMISSION_DENIED",
                                "message": "Authenticated user has no permission to access the requested resource"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.\nThe server could not produce a new consumable Purchases resource, yet it cannot provide more thorough information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INTERNAL",
                                "message": "Server error"
                            }
                        }
                    },
                    "504": {
                        "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
                        },
                        "examples": {
                            "application/json": {
                                "code": "TIMEOUT",
                                "message": "Request timeout exceeded. Try it later"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["purchase"],
                "summary": "Initialises a Purchase",
                "operationId": "initialisePurchase",
                "description": "Creates a Purchase for a given payable (invoice, topup, product, etc...) and a given amount",
                "x-fp-pi-scopes": ["checkout-purchase-user-write"],
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "$ref": "#/parameters/NewPurchase"
                    },
                    {
                        "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The purchase is correctly created",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Purchase"
                        },
                        "examples": {
                            "application/json": {
                                "payable": {
                                    "type": "invoices",
                                    "invoices": [
                                        {
                                            "id": "invoiceId1",
                                            "amount": {
                                                "value": 6.25,
                                                "currency": "BRL"
                                            }
                                        },
                                        {
                                            "id": "invoiceId2",
                                            "amount": {
                                                "value": 6.25,
                                                "currency": "BRL"
                                            }
                                        }
                                    ],
                                    "total_amount": {
                                        "value": 12.5,
                                        "currency": "BRL"
                                    }
                                },
                                "id": "54d811ef-bb43-4284-b90e-57edc9b4fa31",
                                "status": "ongoing",
                                "payment_info": null
                            }
                        }
                    },
                    "400": {
                        "description": "Problem with the client request.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INVALID_ARGUMENT",
                                "message": "Client specified an invalid argument, request body or query param"
                            }
                        }
                    },
                    "403": {
                        "description": "Client requested an operation that is denied.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
                        },
                        "examples": {
                            "application/json": {
                                "code": "PERMISSION_DENIED",
                                "message": "Authenticated user has no permission to access the requested resource"
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
                        },
                        "examples": {
                            "application/json": {
                                "code": "NOT_FOUND",
                                "message": "The specified resource is not found"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.\nThe server could not produce a new consumable Purchases resource, yet it cannot provide more thorough information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INTERNAL",
                                "message": "Server error"
                            }
                        }
                    },
                    "504": {
                        "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
                        },
                        "examples": {
                            "application/json": {
                                "code": "TIMEOUT",
                                "message": "Request timeout exceeded. Try it later"
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}/purchases/{purchase_id}": {
            "get": {
                "tags": ["purchase"],
                "summary": "Requests a purchase's information",
                "operationId": "getPurchaseInfo",
                "description": "Provides all relevant information regarding a purchase, including its state and payment data",
                "x-fp-pi-scopes": ["checkout-purchase-user-read"],
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "$ref": "#/parameters/PurchaseId"
                    },
                    {
                        "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The purchase information",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Purchase"
                        },
                        "examples": {
                            "application/json": {
                                "payable": {
                                    "type": "invoices",
                                    "invoices": [
                                        {
                                            "id": "invoiceId1",
                                            "amount": {
                                                "value": 6.25,
                                                "currency": "BRL"
                                            }
                                        },
                                        {
                                            "id": "invoiceId2",
                                            "amount": {
                                                "value": 6.25,
                                                "currency": "BRL"
                                            }
                                        }
                                    ],
                                    "total_amount": {
                                        "value": 12.5,
                                        "currency": "BRL"
                                    }
                                },
                                "id": "54d811ef-bb43-4284-b90e-57edc9b4fa31",
                                "status": "succeeded",
                                "payment_info": null
                            }
                        }
                    },
                    "403": {
                        "description": "Client requested an operation that is denied.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/PermissionDenied"
                        },
                        "examples": {
                            "application/json": {
                                "code": "PERMISSION_DENIED",
                                "message": "Authenticated user has no permission to access the requested resource"
                            }
                        }
                    },
                    "404": {
                        "description": "The purchase does not exist",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
                        },
                        "examples": {
                            "application/json": {
                                "code": "NOT_FOUND",
                                "message": "The specified resource is not found"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.\nThe server could not produce a new consumable Purchases resource, yet it cannot provide more thorough information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INTERNAL",
                                "message": "Server error"
                            }
                        }
                    },
                    "504": {
                        "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
                        },
                        "examples": {
                            "application/json": {
                                "code": "TIMEOUT",
                                "message": "Request timeout exceeded. Try it later"
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}/purchases/{purchase_id}/payment": {
            "put": {
                "tags": ["payment"],
                "summary": "Performs a payment against an existing purchase",
                "operationId": "putPayment",
                "description": "Requests a payment for a given purchase providing a payment type and metadata.\nSome payments are performed immediately, whilst others require further user action (like producing credit card details via UI).",
                "x-fp-pi-scopes": ["checkout-purchase-payment-user-write"],
                "parameters": [
                    {
                        "$ref": "#/parameters/UserId"
                    },
                    {
                        "$ref": "#/parameters/PurchaseId"
                    },
                    {
                        "$ref": "#/parameters/PaymentData"
                    },
                    {
                        "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Will be returned when the payment is accepted by Global Checkout and no further interaction is needed by the API client. A follow up check on the purchase endpoint will result on the purchase status",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/AcceptedPayment"
                        },
                        "examples": {
                            "application/json": {
                                "payment_method": {
                                    "masked_number": "244533******1234",
                                    "expiration_date": "09/22",
                                    "token": "APINDFGESCEDDPDAPOFAJSDOFJAPOFAAEFAIADPJFA",
                                    "token_issuer": "DCP"
                                },
                                "payment_platform": "DCP"
                            }
                        }
                    },
                    "202": {
                        "description": "Will be returned when the payment request has been registered, but it requires further processing by the API client. The response payload will provide all necessary information to complete the payment. A follow up check on the purchase endpoint will result on a ongoing status",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        },
                        "examples": {
                            "application/json": {
                                "payment_plaform": "DCP",
                                "payment_method": {
                                    "type": "new_card"
                                },
                                "payment_info": {
                                    "form_url": "https://qa.mesgw.us.telefonica.com:6986/servlet/ServletDirectorMovil",
                                    "sale_parameters": {
                                        "IDENTIDAD": "SCNP",
                                        "IDCOMERCIO": "100000010"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Problem with the client request.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INVALID_ARGUMENT",
                                "message": "Client specified an invalid argument, request body or query param"
                            }
                        }
                    },
                    "404": {
                        "description": "The purchase does not exist",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/NotFound"
                        },
                        "examples": {
                            "application/json": {
                                "code": "NOT_FOUND",
                                "message": "The specified resource is not found"
                            }
                        }
                    },
                    "409": {
                        "description": "Payment was requested for an already paid Purchase",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/AlreadyExists"
                        },
                        "examples": {
                            "application/json": {
                                "code": "ALREADY_EXISTS",
                                "message": "A specified resource already exists"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.\nThe server could not produce a new consumable Purchases resource, yet it cannot provide more thorough information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INTERNAL",
                                "message": "Server error"
                            }
                        }
                    },
                    "504": {
                        "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
                        },
                        "examples": {
                            "application/json": {
                                "code": "TIMEOUT",
                                "message": "Request timeout exceeded. Try it later"
                            }
                        }
                    }
                }
            }
        },
        "/configuration": {
            "get": {
                "tags": ["configuration"],
                "summary": "Returns the configuration of the checkout",
                "operationId": "getConfiguration",
                "description": "Returns the configuration of the checkout e.g. the maximum number of credit cards a user can store",
                "parameters": [
                    {
                        "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/parameters/x-correlator"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the configuration of the checkout",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Configuration"
                        },
                        "examples": {
                            "application/json": {
                                "max_number_of_stored_cards": 3,
                                "locale": "pt-BR",
                                "valid_channel_ids": ["channelId1", "channelId2", "channelId3"]
                            }
                        }
                    },
                    "400": {
                        "description": "Client request doesn't satisfy the API definition.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/InvalidArgument"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INVALID_ARGUMENT",
                                "message": "Client specified an invalid argument, request body or query param"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.\nThe server could not produce a new consumable Purchases resource, yet it cannot provide more thorough information.",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Internal"
                        },
                        "examples": {
                            "application/json": {
                                "code": "INTERNAL",
                                "message": "Server error"
                            }
                        }
                    },
                    "504": {
                        "description": "Request timeout exceeded. If it happens repeatedly, consider reducing the request complexity",
                        "headers": {
                            "x-correlator": {
                                "type": "string",
                                "description": "Correlation id for the different services"
                            }
                        },
                        "schema": {
                            "$ref": "https://docs.baikalplatform.com/errors/v2.0/errors.json#/definitions/Timeout"
                        },
                        "examples": {
                            "application/json": {
                                "code": "TIMEOUT",
                                "message": "Request timeout exceeded. Try it later"
                            }
                        }
                    }
                }
            }
        }
    },
    "x-fp-health": "http://global-checkout:8080/health",
    "definitions": {
        "PaymentPlatform": {
            "type": "string",
            "description": "Information on the platform that provides the payment method",
            "enum": ["DCP", "ONESAIT", "TRUUST"]
        },
        "PaymentMethodType": {
            "type": "string",
            "description": "Information about the type of payment method.",
            "enum": ["card"]
        },
        "PolymorphicNewPaymentMethodRegistration": {
            "type": "object",
            "description": "Basic representation of a new payment method registration, this type could be extended. Provides information necessary to register a new payment method.",
            "properties": {
                "type": {
                    "$ref": "#/definitions/PaymentMethodType"
                }
            },
            "required": ["type"]
        },
        "PolymorphicPaymentMethodRegistration": {
            "type": "object",
            "description": "Provides information necessary to complete the payment method registration",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "UUID that uniquely identifies the payment method registration"
                },
                "status": {
                    "type": "string",
                    "enum": ["saving", "saved_ok", "saved_nok"],
                    "description": "Status in which the process of registering the payment method is currently in."
                },
                "type": {
                    "type": "string",
                    "description": "The type of payment method registration",
                    "enum": ["card_payment_method_registration"]
                },
                "platform": {
                    "$ref": "#/definitions/PaymentPlatform"
                }
            },
            "example": {
                "id": "7a622a44-ab0d-4fad-a38c-28db8e584638",
                "status": "saving",
                "type": "card_payment_method_registration",
                "platform": "DCP"
            },
            "required": ["id", "status", "type", "platform"],
            "discriminator": "type"
        },
        "card_payment_method_registration": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolymorphicPaymentMethodRegistration"
                },
                {
                    "type": "object",
                    "description": "Provides information necessary to complete the card registration",
                    "properties": {
                        "registration_form": {
                            "$ref": "#/definitions/FormPaymentInfo"
                        }
                    }
                }
            ],
            "example": {
                "id": "7a622a44-ab0d-4fad-a38c-28db8e584638",
                "status": "saving",
                "registration_form": {
                    "form_url": "https://qa.mesgw.us.telefonica.com:6986/servlet/ServletDirectorMovil",
                    "sale_parameters": {
                        "IDENTIDAD": "SCNP",
                        "IDCOMERCIO": "100000010"
                    }
                },
                "type": "card",
                "platform": "DCP"
            }
        },
        "PurchaseBase": {
            "type": "object",
            "properties": {
                "payable": {
                    "$ref": "#/definitions/PolymorphicPayable"
                }
            },
            "required": ["payable"]
        },
        "NewPurchase": {
            "allOf": [
                {
                    "$ref": "#/definitions/PurchaseBase"
                },
                {
                    "additionalProperties": false
                }
            ]
        },
        "PolymorphicPayable": {
            "type": "object",
            "description": "Basic representation of a payable resource/entity. Please refer to the Model to see all possible instances of Payable (eg. top_up, invoices)",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of payable to be purchased, the content of this field will drive the schema to be used on a payable object",
                    "enum": ["top_up", "invoices", "market"]
                }
            },
            "required": ["type"],
            "discriminator": "type"
        },
        "PolymorphicPaymentInfo": {
            "type": "object",
            "description": "Basic representation of a payment. Please refer to the Model to see all possible instances of Payment (eg. dcp_payment)",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The information relative to the payment, the content of this field will drive the schema to be used on a Payment object",
                    "enum": ["dcp_payment"]
                }
            },
            "required": ["type"],
            "discriminator": "type"
        },
        "top_up": {
            "description": "Basic representation of a top-up, including target phone number and the amount to be paid and then fulfilled on the service provider.",
            "allOf": [
                {
                    "$ref": "#/definitions/PolymorphicPayable"
                },
                {
                    "type": "object",
                    "description": "Represents a TopUp",
                    "properties": {
                        "phone_number": {
                            "type": "string",
                            "description": "The MSISDN on which the Top-Up will be performed.",
                            "pattern": "^\\+\\d{1,15}",
                            "example": "+346661113334"
                        },
                        "amount": {
                            "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/definitions/MoneyAmount"
                        }
                    },
                    "required": ["phone_number", "amount"]
                }
            ],
            "example": {
                "type": "top_up",
                "phone_number": "+346661113334",
                "amount": {
                    "value": 25.0,
                    "currency": "BRL",
                    "tax_included": true
                }
            }
        },
        "invoices": {
            "description": "Basic representation of an invoice, including the total sum of all amount of invoices.",
            "allOf": [
                {
                    "$ref": "#/definitions/PolymorphicPayable"
                },
                {
                    "type": "object",
                    "description": "Represents a collection of invoices to be paid",
                    "properties": {
                        "invoices": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Invoice"
                            }
                        },
                        "total_amount": {
                            "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/definitions/MoneyAmount"
                        }
                    },
                    "required": ["invoices", "total_amount"]
                }
            ],
            "example": {
                "type": "invoice",
                "invoices": [
                    {
                        "id": "invoiceId1",
                        "amount": {
                            "value": 6.25,
                            "currency": "BRL"
                        }
                    },
                    {
                        "id": "invoiceId2",
                        "amount": {
                            "value": 6.25,
                            "currency": "BRL"
                        }
                    }
                ],
                "total_amount": {
                    "value": 12.5,
                    "currency": "BRL",
                    "tax_included": true
                }
            }
        },
        "market": {
            "description": "Basic representation of a market product, including the total sum of all amount of the items.",
            "allOf": [
                {
                    "$ref": "#/definitions/PolymorphicPayable"
                },
                {
                    "type": "object",
                    "description": "Represents a collection of a product belonging to a external merchant to be paid",
                    "properties": {
                        "order": {
                            "$ref": "#/definitions/MarketOrder"
                        },
                        "merchant": {
                            "$ref": "#/definitions/MarketMerchant"
                        }
                    },
                    "required": ["order", "merchant"]
                }
            ],
            "example": {
                "type": "market",
                "order": {
                    "id": "MarketOrder1",
                    "items": [
                        {
                            "name": "MarketOrderItemName1",
                            "amount": {
                                "value": 25,
                                "currency": "EUR"
                            }
                        },
                        {
                            "name": "MarketOrderItemName2",
                            "amount": {
                                "value": 40,
                                "currency": "EUR"
                            }
                        }
                    ],
                    "total_amount": {
                        "value": 65,
                        "currency": "EUR",
                        "tax_included": true
                    }
                },
                "merchant": {
                    "id": "MerchantId1",
                    "name": "MerchantName1",
                    "fee": 15.45
                }
            }
        },
        "MarketOrder": {
            "type": "object",
            "description": "Represents a order from external market",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier on the merchant external system"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MarketOrderItem"
                    }
                },
                "total_amount": {
                    "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/definitions/MoneyAmount"
                }
            },
            "required": ["id", "items", "total_amount"],
            "example": {
                "id": "MarketOrder1",
                "items": [
                    {
                        "name": "MarketOrderItemName1",
                        "amount": {
                            "value": 25,
                            "currency": "EUR"
                        }
                    },
                    {
                        "name": "MarketOrderItemName2",
                        "amount": {
                            "value": 40,
                            "currency": "EUR"
                        }
                    }
                ],
                "total_amount": {
                    "value": 65,
                    "currency": "EUR",
                    "tax_included": true
                }
            }
        },
        "MarketOrderItem": {
            "type": "object",
            "description": "A item from external merchant to be paid during checkout",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Item description provided by external merchant"
                },
                "amount": {
                    "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/definitions/MoneyAmount"
                }
            },
            "required": ["name", "amount"],
            "example": {
                "name": "MarketOrderItemName1",
                "amount": {
                    "value": 25,
                    "currency": "EUR"
                }
            }
        },
        "MarketMerchant": {
            "type": "object",
            "description": "Represents a merchant from external market",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the merchant"
                },
                "name": {
                    "type": "string",
                    "description": "Merchant description"
                },
                "fee": {
                    "type": "number",
                    "format": "float",
                    "description": "Fee percentage for the platform"
                }
            },
            "required": ["id", "name", "fee"],
            "example": {
                "id": "MerchantId1",
                "name": "MerchantName1",
                "fee": 15.45
            }
        },
        "Invoice": {
            "type": "object",
            "description": "A invoice to be fulfilled during checkout",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier on the fulfilment system"
                },
                "amount": {
                    "$ref": "https://docs.baikalplatform.com/common/v2.3/common.json#/definitions/MoneyAmount"
                }
            },
            "required": ["id", "amount"],
            "example": {
                "id": "InvoiceId1",
                "amount": {
                    "value": 25,
                    "currency": "BRL"
                }
            }
        },
        "Purchases": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Purchase"
            }
        },
        "Purchase": {
            "allOf": [
                {
                    "$ref": "#/definitions/PurchaseBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "Unique Identifier of the purchase transaction",
                            "format": "uuid"
                        },
                        "status": {
                            "type": "string",
                            "description": "Identifies the purchase status. Indicates if a purchase payment is ongoing, succeeded or failed",
                            "enum": ["ongoing", "succeeded", "failed"]
                        },
                        "payment_info": {
                            "$ref": "#/definitions/PolymorphicPaymentInfo"
                        }
                    },
                    "required": ["id", "status"],
                    "additionalProperties": false
                }
            ]
        },
        "PaymentBase": {
            "type": "object",
            "description": "Represents a request for payment of a given purchase",
            "properties": {
                "payment_platform": {
                    "$ref": "#/definitions/PaymentPlatform"
                }
            }
        },
        "NewPayment": {
            "allOf": [
                {
                    "$ref": "#/definitions/PaymentBase"
                },
                {
                    "type": "object",
                    "description": "Provided the needed information to perform a payment",
                    "properties": {
                        "payment_method": {
                            "$ref": "#/definitions/PolymorphicPaymentMethod"
                        }
                    },
                    "required": ["payment_method"]
                }
            ],
            "example": {
                "payment_platform": "DCP",
                "payment_method": {
                    "type": "new_card"
                }
            }
        },
        "Payment": {
            "allOf": [
                {
                    "$ref": "#/definitions/PaymentBase"
                },
                {
                    "type": "object",
                    "description": "Provides information necessary to complete the payment",
                    "properties": {
                        "payment_info": {
                            "$ref": "#/definitions/FormPaymentInfo"
                        },
                        "payment_method": {
                            "$ref": "#/definitions/PolymorphicPaymentMethod"
                        }
                    },
                    "example": {
                        "payment_method": {
                            "type": "new_card"
                        },
                        "payment_info": {
                            "form_url": "https://qa.mesgw.us.telefonica.com:6986/servlet/ServletDirectorMovil",
                            "sale_parameters": {
                                "IDENTIDAD": "SCNP",
                                "IDCOMERCIO": "100000010"
                            }
                        }
                    },
                    "required": ["payment_method"],
                    "additionalProperties": false
                }
            ]
        },
        "AcceptedPayment": {
            "allOf": [
                {
                    "$ref": "#/definitions/PaymentBase"
                },
                {
                    "type": "object",
                    "description": "Provides information for a payment accepted by Global Checkout to be processed",
                    "properties": {
                        "payment_method": {
                            "$ref": "#/definitions/TokenizedCardPaymentMethod"
                        }
                    },
                    "required": ["payment_method"]
                }
            ],
            "example": {
                "payment_platform": "DCP",
                "payment_method": {
                    "masked_number": "244533******1234",
                    "expiration_date": "09/22",
                    "token": "APINDFGESCEDDPDAPOFAJSDOFJAPOFAAEFAIADPJFA",
                    "token_issuer": "DCP"
                }
            }
        },
        "dcp_payment": {
            "description": "Information related to a payment with DCP as payment gateway.",
            "allOf": [
                {
                    "$ref": "#/definitions/PolymorphicPaymentInfo"
                },
                {
                    "type": "object",
                    "description": "Provides information relative to the payment method including the saved card status.",
                    "properties": {
                        "card_status": {
                            "type": "string",
                            "enum": ["saving", "not_saved", "saved_ok", "saved_nok", "saved_unk"],
                            "description": "Status in which the process of saving the card status is currently in."
                        }
                    },
                    "required": ["card_status"],
                    "additionalProperties": false
                }
            ],
            "example": {
                "type": "dcp_payment",
                "card_status": "saved_ok"
            }
        },
        "PolymorphicPaymentMethod": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Identifies the type of payment to be used",
                    "enum": ["tokenized_card", "new_card"]
                }
            },
            "required": ["type"],
            "discriminator": "type"
        },
        "tokenized_card": {
            "description": "Includes all necessary information to perform a payment with a tokenized card",
            "allOf": [
                {
                    "$ref": "#/definitions/PolymorphicPaymentMethod"
                },
                {
                    "type": "object",
                    "description": "Represents a payment with previously saved card",
                    "properties": {
                        "card": {
                            "$ref": "#/definitions/TokenizedCardPaymentMethod"
                        }
                    },
                    "required": ["card"],
                    "additionalProperties": false
                }
            ],
            "example": {
                "type": "tokenized_card",
                "card": {
                    "masked_number": "244533******1234",
                    "expiration_date": "09/22",
                    "token": "APINDFGESCEDDPDAPOFAJSDOFJAPOFAAEFAIADPJFA",
                    "token_issuer": "DCP"
                }
            }
        },
        "new_card": {
            "description": "Includes all necessary information to perform a payment with a new card",
            "allOf": [
                {
                    "$ref": "#/definitions/PolymorphicPaymentMethod"
                },
                {
                    "type": "object",
                    "description": "Represents a payment with new card",
                    "properties": {
                        "save_card": {
                            "type": "boolean",
                            "description": "Its value informs if the client wants their credit card to be saved"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "example": {
                "type": "new_card",
                "save_card": true
            }
        },
        "TokenizedCardPaymentMethod": {
            "type": "object",
            "description": "Contains all the needed information about a saved card to be able to perform a payment with it",
            "properties": {
                "masked_number": {
                    "type": "string",
                    "description": "Masked Personal Account Number, i.e.: Card number."
                },
                "expiration_date": {
                    "type": "string",
                    "pattern": "^(0[1-9]|1[0-2])/[0-9]{2}$",
                    "description": "Card expiration date, in format MM/YY"
                },
                "token": {
                    "type": "string",
                    "description": "The token itself"
                },
                "token_issuer": {
                    "$ref": "#/definitions/PaymentPlatform"
                }
            },
            "required": ["masked_number", "expiration_date", "token", "token_issuer"],
            "example": {
                "masked_number": "244533******1234",
                "expiration_date": "09/22",
                "token": "APINDFGESCEDDPDAPOFAJSDOFJAPOFAAEFAIADPJFA",
                "token_issuer": "DCP"
            }
        },
        "FormPaymentInfo": {
            "type": "object",
            "description": "Provides information to render a form in order to complete the requested payment or payment method registration",
            "properties": {
                "form_url": {
                    "type": "string",
                    "description": "URL to POST the x-www-form-urlencoded parameters to render the Form",
                    "format": "uri"
                },
                "sale_parameters": {
                    "type": "object",
                    "description": "Pairs of key/value for the parameters that have to be submitted when the Form specified by the form_url is requested"
                }
            },
            "required": ["form_url", "sale_parameters"],
            "additionalProperties": false
        },
        "Configuration": {
            "type": "object",
            "required": ["max_number_of_stored_cards", "locale", "valid_channel_ids"],
            "properties": {
                "max_number_of_stored_cards": {
                    "type": "number"
                },
                "locale": {
                    "type": "string",
                    "description": "Locale in format language-country. Example es-ES, pt-BR",
                    "example": "pt-BR"
                },
                "valid_channel_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The channel ids accepted by SDKs.",
                    "example": ["channelId1", "channelId2", "channelId3"]
                }
            }
        }
    },
    "parameters": {
        "PaymentMethodRegistrationData": {
            "name": "payment_method_registration_data",
            "in": "body",
            "description": "Information for registering a new payment method",
            "schema": {
                "$ref": "#/definitions/PolymorphicNewPaymentMethodRegistration"
            },
            "required": true
        },
        "PaymentMethodRegistrationId": {
            "in": "path",
            "name": "payment_method_registration_id",
            "description": "Uniquely identifies a purchase",
            "type": "string",
            "format": "uuid",
            "required": true
        },
        "PurchaseId": {
            "in": "path",
            "name": "purchase_id",
            "description": "Uniquely identifies a purchase",
            "type": "string",
            "format": "uuid",
            "required": true
        },
        "NewPurchase": {
            "in": "body",
            "name": "new_purchase",
            "description": "The information regarding the purchase to be initialised",
            "required": true,
            "schema": {
                "$ref": "#/definitions/NewPurchase"
            }
        },
        "PaymentData": {
            "name": "payment_data",
            "in": "body",
            "description": "Information for paying the selected purchase",
            "schema": {
                "$ref": "#/definitions/NewPayment"
            },
            "required": true
        },
        "UserId": {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "id of the user for which the method apply.\nThis value should be changed to the special keyword 'me' to simplify calls when access using OAuth2 with three-legged authentication",
            "x-fp-identifier": "user_id"
        }
    }
}
